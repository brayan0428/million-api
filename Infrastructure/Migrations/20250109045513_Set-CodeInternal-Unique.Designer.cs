// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MillionDbContext))]
    [Migration("20250109045513_Set-CodeInternal-Unique")]
    partial class SetCodeInternalUnique
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Owner", b =>
                {
                    b.Property<int>("IdOwner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOwner"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("IdOwner");

                    b.ToTable("Owners", (string)null);

                    b.HasData(
                        new
                        {
                            IdOwner = 1,
                            Address = "Calle 123, Bogotá",
                            Birthday = new DateTime(1980, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Juan Pérez"
                        },
                        new
                        {
                            IdOwner = 2,
                            Address = "Avenida Central 45, Medellín",
                            Birthday = new DateTime(1992, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "María Rodríguez"
                        },
                        new
                        {
                            IdOwner = 3,
                            Address = "Carrera 10 #15-20, Cali",
                            Birthday = new DateTime(1975, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Carlos Gómez"
                        },
                        new
                        {
                            IdOwner = 4,
                            Address = "Diagonal 25 #33-45, Barranquilla",
                            Birthday = new DateTime(1988, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ana Martínez"
                        });
                });

            modelBuilder.Entity("Core.Entities.Property", b =>
                {
                    b.Property<int>("IdProperty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProperty"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CodeInternal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("IdOwner")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("IdProperty");

                    b.HasIndex("CodeInternal")
                        .IsUnique();

                    b.HasIndex("IdOwner");

                    b.ToTable("Properties", (string)null);

                    b.HasData(
                        new
                        {
                            IdProperty = 1,
                            Address = "Sector Punta Arena, Cartagena",
                            CodeInternal = "PROP001",
                            IdOwner = 1,
                            Name = "Casa en la Playa",
                            Price = 350000000m,
                            Year = 2015
                        },
                        new
                        {
                            IdProperty = 2,
                            Address = "Carrera 7 #12-34, Bogotá",
                            CodeInternal = "PROP002",
                            IdOwner = 2,
                            Name = "Apartamento en el Centro",
                            Price = 500000000m,
                            Year = 2020
                        },
                        new
                        {
                            IdProperty = 3,
                            Address = "Kilómetro 15 vía al Llano, Villavicencio",
                            CodeInternal = "PROP003",
                            IdOwner = 3,
                            Name = "Finca Campestre",
                            Price = 800000000m,
                            Year = 2010
                        },
                        new
                        {
                            IdProperty = 4,
                            Address = "Zona Rosa, Medellín",
                            CodeInternal = "PROP004",
                            IdOwner = 4,
                            Name = "Local Comercial",
                            Price = 950000000m,
                            Year = 2018
                        },
                        new
                        {
                            IdProperty = 5,
                            Address = "Edificio Ocean View, Santa Marta",
                            CodeInternal = "PROP005",
                            IdOwner = 1,
                            Name = "Penthouse de Lujo",
                            Price = 1200000000m,
                            Year = 2019
                        });
                });

            modelBuilder.Entity("Core.Entities.PropertyImage", b =>
                {
                    b.Property<int>("IdPropertyImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPropertyImage"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("IdProperty")
                        .HasColumnType("int");

                    b.HasKey("IdPropertyImage");

                    b.HasIndex("IdProperty");

                    b.ToTable("PropertyImage");
                });

            modelBuilder.Entity("Core.Entities.PropertyTrace", b =>
                {
                    b.Property<int>("IdPropertyTrace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPropertyTrace"));

                    b.Property<DateTime>("DateSale")
                        .HasColumnType("datetime");

                    b.Property<int>("IdProperty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdPropertyTrace");

                    b.HasIndex("IdProperty");

                    b.ToTable("PropertyTrace");
                });

            modelBuilder.Entity("Core.Entities.Property", b =>
                {
                    b.HasOne("Core.Entities.Owner", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("IdOwner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Core.Entities.PropertyImage", b =>
                {
                    b.HasOne("Core.Entities.Property", "Property")
                        .WithMany("PropertyImages")
                        .HasForeignKey("IdProperty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Core.Entities.PropertyTrace", b =>
                {
                    b.HasOne("Core.Entities.Property", "Property")
                        .WithMany("PropertyTraces")
                        .HasForeignKey("IdProperty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Core.Entities.Owner", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Core.Entities.Property", b =>
                {
                    b.Navigation("PropertyImages");

                    b.Navigation("PropertyTraces");
                });
#pragma warning restore 612, 618
        }
    }
}
